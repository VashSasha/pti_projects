<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>React State</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body>
    <style>
        body {
            padding-top: 50px;
        }

        .z {
            color: red;
            margin: 1em 0;
        }

        .hidden {
            display: none;
        }

        .t {
            font-style: italic;
        }

        .t99 {
            padding: 10px;
            background: #8fff00;
        }

        .t97 {
            color: #fff;
            background: #144d74;
            padding: 15px;
            margin: 0;
            font-style: normal;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 9999;
        }

        .t97 a {
            color: #ffd600;
        }

        .t97 button {
            float: right;
        }

        #ab {
            border: 1px dashed orange;
        }

        .hi {
            background: yellow;
        }
    </style>

    <style>
        .whores-container {
            background: #751a1a;
            width: 910px;
            height:  474px;
            padding: 10px;
            overflow: hidden;
            margin-bottom: 1em;
        }

        .whore {
            background: white;
            padding: 10px;
            width: 200px;
            position: relative;
            font-family: Arial, sans-serif;
            font-size: 15px;
            cursor: pointer;
            float: left;
            margin: 0 0 10px 10px;
        }

        .whore:first-child {
            margin-left: 0;
        }

        .whore-name {
            font-size: 22px;
            font-family: Tahoma, sans-serif;
            margin-bottom: 5px;
            color: #7b1e1e;
        }

        .whore img {
            margin-bottom: 10px;
        }

        .whore-teaser {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            box-sizing: border-box;
            padding: 10px;
            display: none;
        }

        .whore:hover .whore-teaser {
            display: block;
        }

        .whore-phone {
            font-size: 18px;
            font-weight: bold;
            margin: 5px 0 1px;
        }
    </style>

    <script>
        var jasmine = {
            name: 'Жасмин',
            photo: 'images/zhasmin.jpg',
            age: '18',
            boobs: '3',
            weight: '50',
            height: '168',
            phone: '+380960000000',
            can_come: true,
            teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
        };
    </script>

    <style>
        .cats-container {
            width: 600px;
            height: 200px;
            margin-bottom: 1em;
        }

        .cat-container-1,
        .cat-container-2 {
            float: left;
            width: 49%;
            height: 200px;
            box-sizing: border-box;
            padding: 10px;
            border: 1px dashed #000;
            margin-left: 0.5%;
        }
    </style>

    <style>
        .tooth-container {
            width: 600px;
            height: 266px;
            padding: 5px;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tooth + .boy {
            display: none;
        }
    </style>

    <style>
        .ski-resort {
            width: 600px;
            height: 170px;
            border: 1px solid #000;
            position: relative;
            overflow-x: auto;
            overflow-y: hidden;
            margin-bottom: 1em;
        }

        .skier {
            width: 150px;
            transform: scale(-1, 1);
            position: absolute;
            top: 85px;
            left: 0;
        }
    </style>

    <style>
        .mikki_tiles {
            width: 400px;
            height: 400px;
            border: 1px solid black;
        }

        .mikki_tile {
            width: 20px;
            height: 20px;
            float: left;
        }
    </style>

    <script>
        var mikki = [
            '  XXXX        XXXX  ',
            ' XXXXXX      XXXXXX ',
            'XXXX XX XXXX XX XXXX',
            'XXX  XXXXXXXXXX  XXX',
            'XXXXXXXXXXXXXXXXXXXX',
            'XXXXXXX      XXXXXXX',
            ' XXXXX        XXXXX ',
            '   XXX  XX XX XXX   ',
            '    XX  XX XX XX    ',
            '    XXX X  X  XX    ',
            '    X         XX    ',
            '    X    XXX  XX    ',
            '    XX   XXX  XX    ',
            '     XX      XX     ',
            '      X  XX  X      ',
            '       X    X       ',
            '     XX XXXX XX     ',
            '     XX      XX     ',
            '    XX        XX    ',
            '   XXXXXXXXXXXXXX   '
        ];
    </script>

    <style>
        .scene {
            width: 800px;
            height: 272px;
            position: relative;
            overflow: hidden;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tile {
            width: 16px;
            height: 16px;
            position: absolute;
            background-image: url('images/mario_tileset.png');
            background-repeat: no-repeat;
            background-position: 16px 16px;
        }

        .tile.x_z {
            background-position: -96px -112px;
        }
        .tile.x_k {
            background-position: -144px -112px;
        }
        .tile.x_c {
            background-position: -128px -112px;
        }
        .tile.x_t {
            background-position: 0 -48px;
            width: 32px;
            height: 48px;
        }
        .tile.x_g {
            background-position: 0 -128px;
            width: 48px;
            height: 32px;
        }
        .tile.x_b {
            background-position: -144px -208px;
            width: 80px;
            height: 48px;
        }
        .tile.x_d {
            background-position: 0 -96px;
            width: 80px;
            height: 32px;
        }
        .tile.x_w {
            background-position: -96px -224px;
            width: 48px;
            height: 32px;
        }
    </style>

    <script>
        var map = [
            '                                                  ',
            '                                                  ',
            '                                                  ',
            '                    w                             ',
            '                                       w          ',
            '                                                  ',
            '                       c                          ',
            '                                                  ',
            '                                        c         ',
            '                                                  ',
            '                c    kkkkk                        ',
            ' b                                     t        c ',
            '            d    g       d                        ',
            '                                                  ',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
        ];
    </script>

    <style>
        .slide {
            width: 302px;
            height: 347px;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            display: none;
        }

        .slide.active {
            display: block;
        }

        .pagination {
            margin: 1em 0;
        }
    </style>

    <style>
        .question {
            color: #0078d7;
            padding: 10px 20px 10px;
            border-top: 1px solid #d2d2d2;
            cursor: pointer;
        }

        .question:hover {
            background: #e6e6e6;
        }

        .answer {
            padding: 10px 20px 10px;
            margin: 0;
            display: none;
        }

        .question.active + .answer {
            display: block;
        }
    </style>

    <style>
        .tabs {
            border-bottom: 1px solid black;
            width: 400px;
        }

        .tabs .item {
            background: grey;
            border: 1px solid black;
            border-radius: 10px 10px 0 0;
            display: inline-block;
            margin-bottom: -1px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .tabs .item:hover,
        .tabs .item.active {
            background: lightgray;
        }

        .tabs-content .item {
            display: none;
        }

        .tabs-content .item.active {
            display: block;
        }
    </style>

    <style>
        .overlay {
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: black;
            opacity: 0.8;
        }

        .pop-up {
            position: fixed;
            left: 50%;
            top: 50%;
            margin-top: -200px;
            margin-left: -150px;
            background: white;
            border-radius: 10px;
            width: 300px;
            height: 400px;
            padding: 20px;
            box-sizing: border-box;
        }

        .pop-up input {
            margin-bottom: 10px;
            display: block;
        }

        .pop-up .close {
            position: absolute;
            width: 30px;
            height: 30px;
            text-align: center;
            line-height: 30px;
            background: black;
            color: white;
            border-radius: 50%;
            right: -15px;
            top: -15px;
            cursor: pointer;
            font-family: Tahoma, sans-serif;
            border: none;
        }

        .pop-up .close:hover {
            background: #912626;
        }
    </style>

    <div id="app"></div>

    <script type="text/babel">
        class TaskChangeColor extends React.Component {
            state = {
                color: 'black'
            };

            handleClick = () => {
                this.setState({color: 'green'});
            };

            render() {
                var style = {
                    color: this.state.color
                };

                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет текста</p>
                        <p className="t t1" style={style}>Тест</p>
                        <button className="b b1" onClick={this.handleClick}>Изменить цвет текста</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColor extends React.Component {
            state = {
                background: 'none'
            };

            handleClick = () => {
               this.setState({background: 'lightblue'});
            };

            render() {
                var style = {
                    background: this.state.background
                };

                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет фона</p>
                        <p className="t t2" style={style}>Тест</p>
                        <button className="b b2" onClick={this.handleClick}>Изменить цвет фона</button>
                    </>
                );
            }
        }

        class TaskChangeHref extends React.Component {
            state = {
                href: 'https://habrahabr.ru/'
            };

            handleClick = () => {
                this.setState({href: 'http://google.com'})
            };

            render() {

                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь ссылки</p>
                        <p className="t t3"><a href={this.state.href}>Тест</a></p>
                        <button className="b b3" onClick={this.handleClick}>Изменить путь ссылки</button>
                    </>
                );
            }
        }

        class TaskChangeSrc extends React.Component {
            state = {
                img: 'images/kaktus.jpg'
            };

            handleClick = () => {
                this.setState({img: 'images/fish.jpg'})
            };

            render() {

                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь к картинке</p>
                        <p className="t t4">Тест <img src={this.state.img} width="100" /></p>
                        <button className="b b4" onClick={this.handleClick}>Изменить путь к картинке</button>
                    </>
                );
            }
        }

        class TaskChangeId extends React.Component {
            state = {
                id: 'ab'
            };

            handleClick = () => {
                this.setState({
                    id: 'sasha'
                });
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить id элемента</p>
                        <p className="t t5" id={this.state.id}>Тест</p>
                        <button className="b b5" onClick={this.handleClick}>Изменить id элемента</button>
                    </>
                );
            }
        }

        class TaskChangeText extends React.Component {
            state = {
                text: 'Тест'
            };

            handleClick = () => {
                this.setState({
                    text: 'updated text'
                });
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить текст</p>
                        <p className="t t6">{this.state.text}</p>
                        <button className="b b6" onClick={this.handleClick}>Изменить текст</button>
                    </>
                );
            }
        }

        class TaskChangeHtml extends React.Component {
            //TODO: dangerouslySetInnerHTML

            state = {
                innerHTML: <> Тест <b>Цветы</b> </>
            };

            handleClick = () => {
                this.setState({
                    innerHTML: <h2>Sasha</h2>
                });
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить HTML</p>
                        <p className="t t7">{this.state.innerHTML}</p>
                        <button className="b b7" onClick={this.handleClick}>Изменить HTML</button>
                    </>
                );
            }
        }

        class TaskChangeFontSize extends React.Component {
            state = {
                fontSize: '14px'
            };

            handleClick = () => {
                this.setState({
                    fontSize: '24px'
                });
            };

            render() {
                var style = {
                    fontSize: this.state.fontSize
                };

                return (
                    <>
                        <p className="z">При клике на кнопку изменить размер шрифта</p>
                        <p className="t t8" style={style}>Тест</p>
                        <button className="b b8" onClick={this.handleClick}>Изменить размер шрифта</button>
                    </>
                );
            }
        }

        class TaskChangeAddClass extends React.Component {
            state = {
                className: ''
            };

            handleClick = () => {
                this.setState({
                    className: 'hi'
                })
            };

            render() {
                var {className} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку добавить класс 'hi'</p>
                        <p className={`t t9 ${className}`} >Тест</p>
                        <button className="b b9" onClick={this.handleClick}>Добавить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeRemoveClass extends React.Component {
            state = {
                className: 'hi'
            };

            handleClick = () => {
                this.setState({
                    className: ''
                })
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку удалить класс 'hi'</p>
                        <p className={'t t10 ' + this.state.className}>Тест</p>
                        <button className="b b10" onClick={this.handleClick}>Удалить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeToggleClass extends React.Component {
            state = {
                hasClass: true
            };

            handleClick = () => {
                this.setState((state) => ({
                    hasClass: !state.hasClass
                }));
            };

            render() {
                var {hasClass} = this.state;

                var className = hasClass ? 'hi' : '';
                return (
                    <>
                        <p className="z">При клике на кнопку добавлять/удалять (в зависимости от наличия) класс 'hi'</p>
                        <p className={'t t11 ' + className}>Тест</p>
                        <button className="b b11" onClick={this.handleClick}>`Добавить/удалить (в зависимости от наличия) класс 'hi'`</button>
                    </>
                );
            }
        }

        class TaskShowClass extends React.Component {
            constructor(props) {
                super(props);
                document.addEventListener('click', this.onClick);
            }

            state = {
                targetClass: 'text'
            };

            onClick = (e) => {
                this.setState({targetClass: e.target.className});
            };

            render() {
                var {targetClass} = this.state;

                return (
                    <>
                        <p className="z">При клике на любом элементе страницы выводить значение атрибута class элемента</p>
                        <p className="t t12">{targetClass}</p>
                    </>
                );
            }
        }

        // Пропускаем!
        class TaskTodo1 extends React.Component {
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку перевести текст на английский язык (перевод хранится в атрибуте data-en элемента)</p>
                        <p className="t t13" data-en="sun">Солнце</p>
                        <button className="b b13">Перевести</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColorOnResize extends React.Component {
            constructor(props) {
                super(props);
                window.addEventListener('resize', this.onResize);
            }

            state = {
                background: 'lightPink'
            };

            onResize = () => {
                var r = Math.floor(Math.random() * 256);
                var g = Math.floor(Math.random() * 256);
                var b = Math.floor(Math.random() * 256);
                var colorRGB = "rgb(" + r + "," + g + ", " + b + ")";

                this.setState({background: colorRGB});
            };

            render() {
                const style = {
                    background: this.state.background
                };

                return (
                    <>
                        <p className="z">При изменении размеров окна вкладки или браузера изменять фоновый цвет абзаца (использовать RGB и Math.random)</p>
                        <p className="t t99" style={style}>Drugs are bad, m'kay, so, if you do drugs, you're bad, m'kay, because drugs are bad.</p>
                    </>
                );
            }
        }

        class TaskInputWithCounter extends React.Component {
            state = {
                text: 'Я не касался писи козла!'
            };

            handleChange = (e) => {
                this.setState({
                    text: e.target.value
                });
            };

            render() {
                var {text} = this.state;

                return (
                    <>
                        <p className="z">При изменении значения элемента формы выводить количество символов которое оно содержит</p>
                        <p className="t t98"><input onChange={this.handleChange} type="text" value={text} /> <span className="t98-2">{text.length}</span></p>
                    </>
                );
            }
        }


        var Whore = function(props) {
            return (
                <div className="whore">
                    <div className="whore-name">{props.name}</div>
                    <img src={props.photo} width="200" />
                    <div className="whore-age">Возраст: {props.age}</div>
                    <div className="whore-boobs">Размер груди: {props.boobs}</div>
                    <div className="whore-height">Рост: {props.height}</div>
                    <div className="whore-weight">Вес: {props.weight}</div>
                    <div className="whore-phone">{props.phone}</div>
                    <div className="whore-can-come">Выезд: {props.can_come ? '+' : '-'}</div>
                    <div className="whore-teaser">{props.teaser}</div>
                </div>
            );
        };

        class TaskWhores extends React.Component {
            state = {
                whores: []
            };

            handleClick = () => {
                this.setState((state) => ({
                    whores: [...state.whores, jasmine]
                }));
            };

            render() {
                var {whores} = this.state;

                return (
                    <>
                        <p className="z">Вывести на экран анкету Жасмин используя переменную jasmine (смотри исходный
                            код) двумя способами (созданием элементов, конкатенацией)</p>

                        <div className="whores-container">
                            <div className="whore">
                                <div className="whore-name">{jasmine.name}</div>
                                <img src={jasmine.photo} width="200" />
                                <div className="whore-age">Возраст: {jasmine.age}</div>
                                <div className="whore-boobs">Размер груди: {jasmine.boobs}</div>
                                <div className="whore-height">Рост: {jasmine.height}</div>
                                <div className="whore-weight">Вес: {jasmine.weight}</div>
                                <div className="whore-phone">{jasmine.phone}</div>
                                <div className="whore-can-come">Выезд: {jasmine.can_come ? '+' : '-'}</div>
                                <div className="whore-teaser">{jasmine.teaser}</div>
                            </div>
                            {
                                this.state.whores.map((whore, idx) => <Whore {...whore} key={idx} />)
                            }
                        </div>

                        <button className="b b14" onClick={this.handleClick}>Добавить анкету</button>
                    </>
                );
            }
        }

        class TaskFish extends React.Component {
            state = {
                fishInFirstContainer: true
            };

            onClick = () => {
                this.setState((state) => ({
                    fishInFirstContainer: !state.fishInFirstContainer
                }));
            };

            render() {
                var {fishInFirstContainer} = this.state;
                var fish = <img className="fish" src="images/fish.jpg" width="100" />;

                return (
                    <>
                        <p className="z">Переместить рыбу из первого контейнера во второй (при повторном клике из второго в первый и т.д.)</p>

                        <div className="cats-container">
                            <div className="cat-container-1">
                                <img className="cat" src="images/kat.png" width="100" />
                                {fishInFirstContainer ? fish : null}
                            </div>

                            <div className="cat-container-2">
                                <img className="cat" src="images/kat.png" width="100" />
                                {fishInFirstContainer ? null : fish}
                            </div>
                        </div>

                        <button className="b b15" onClick={this.onClick}>Переместить рыбу</button>
                    </>
                );
            }
        }


        class TaskTooth extends React.Component {
            state = {
                showTooth: true
            };

            removeTooth = () => {
                this.setState((state) => ({
                    showTooth: !state.showTooth
                }));
            };

            render() {
                var {showTooth} = this.state;

                return (
                    <>
                        <p className="z">Удалить зуб</p>

                        <div className="tooth-container">
                            {
                                showTooth &&
                                <img className="tooth" src="images/tooth.jpg" width="200" />
                            }

                            <img className="boy" src="images/bro.jpg" width="600" />
                        </div>

                        <button className="b b16" onClick={this.removeTooth}>Удалить зуб</button>
                    </>
                );
            }
        }

        class TaskSkier extends React.Component {
            state = {
                x: 0
            };

            cliskOnGo = () => {
                this.intervalId = setInterval(this.move, 16);
            };

            move = () => {
                this.setState((state) => ({
                    x: state.x + 5
                }));
            };

            clickOnStop = () => {
                clearInterval(this.intervalId)
            };


            render() {
                var style = {
                    left: this.state.x + 'px'
                };

                return (
                    <>
                        <p className="z">Хочу чтоб лыжник бесконечно ехал вправо (сдвиг на 5px каждые 16ms). При нажатии на кнопку "Стоп!" останавливался.</p>

                        <div className="ski-resort">
                            <img className="skier" src="images/skier.gif" style={style} />
                        </div>

                        <button className="b b17" onClick={this.cliskOnGo}>Поехали!</button>
                        <button className="b b17-2" onClick={this.clickOnStop}>Стоп!</button>
                    </>
                );
            }
        }

        class TaskMikki extends React.Component {

            render() {
                var tiles = [];
                var bgColor;
                for (let i = 0; i < mikki.length; i++) {
                    for (let j = 0; j < mikki[i].length; j++) {
                        if (mikki[i][j] === 'X') {
                            bgColor = 'black';
                        } else {
                            bgColor = null;
                        }
                        tiles.push(<div className="mikki_tile" style={{backgroundColor: bgColor}}></div>);
                    }
                }

                return (
                    <>
                        <p className="z">Хочу такое (смотри исходный код) <img src="images/mikki.png" /></p>

                        <div className="mikki_tiles">
                            {tiles}
                        </div>
                    </>
                );
            }
        }

        class TaskMario extends React.Component {
            state = {
                showChild: false
            };

            handleClick = () => {
                this.setState({showChild: true});
            };

            getTiles() {
                var tiles = [];

                for (let i = 0; i < map.length; i++) {
                    for (let j = 0; j < map[i].length; j++) {
                        let style = {
                            top: i * 16 + 'px',
                            left: j * 16 + 'px'
                        };
                        let className;

                        switch (map[i][j]) {
                            case 'z':
                                className = 'x_z';
                                break;
                            case 'k':
                                className = 'x_k';
                                break;
                            case 'c':
                                className = 'x_c';
                                break;
                            case 't':
                                className = 'x_t';
                                break;
                            case 'g':
                                className = 'x_g';
                                break;
                            case 'b':
                                className = 'x_b';
                                break;
                            case 'd':
                                className = 'x_d';
                                break;
                            case 'w':
                                className = 'x_w';
                                break;
                        }

                        tiles.push(<div className={`tile ${className}`} style={style}></div>);
                    }
                }

                return tiles;
            }

            render() {
                var tiles = this.state.showChild ? this.getTiles() : null;

                return (
                    <>
                        <p className="z">Создать мир Марио <img src="images/mario.png" /></p>

                        <div className="scene">{tiles}</div>

                        <button className="b b18" onClick={this.handleClick}>Создать мир</button>
                    </>
                );
            }
        }

        class TaskSlider extends React.Component {
            state = {
                activeSlideIdx: 0
            };

            slides = [
                'images/slide1.jpg',
                'images/slide2.jpg',
                'images/slide3.jpg',
                'images/slide4.jpg',
                'images/slide5.jpg'
            ];

            clickOnNext = () => {
                this.setState((state) => ({
                    activeSlideIdx: state.activeSlideIdx === this.slides.length - 1 ?
                        0 :
                        state.activeSlideIdx + 1
                }));
            };

            clickOnPrev = () => {
                this.setState((state) => ({
                    activeSlideIdx: state.activeSlideIdx === 0 ?
                        this.slides.length - 1 :
                        state.activeSlideIdx - 1
                }));
            };

            render() {
                var {activeSlideIdx} = this.state;
                const {slides} = this;

                return (
                    <>
                        <p className="z">Кликая по кнопкам "предыдущая" и "следующая" я хочу чтобы менялись соответственно слайды</p>

                        <div className="slider">
                            {
                                slides.map((src, idx) => {
                                    var className = activeSlideIdx === idx ? 'active' : '';
                                    return <img src={src} key={idx} className={`slide ${className}`} />
                                })
                            }
                        </div>

                        <div className="pagination">
                            <button className="previous" onClick={this.clickOnPrev}>Previous</button>
                            <button className="next" onClick={this.clickOnNext}>Next</button>
                        </div>
                    </>
                );
            }
        }

        class TaskFaq extends React.Component {
            state = {
                activeTabIdx: 0,
            };

            items = [
                {
                    question: 'В чем разница между 32-разрядной и 64-разрядной версиями Windows?',
                    answer: 'Термины "32-разрядный" и "64-разрядный" описывают, каким образом процессор (он также называется ЦП) обрабатывает информацию. 64-разрядная версия Windows обрабатывает большие объемы оперативной памяти (ОЗУ) более эффективно по сравнению с 32-разрядной версией. Не все устройства могут работать под управлением 64-разрядных версий Windows.'
                },
                {
                    question: 'Моя копия Windows приобретена через учебное заведение. Можно ли скачать ее здесь?',
                    answer: 'Да, но вам потребуется ключ продукта. Перейдите на страницу загрузок <b>Академические продукты</b> и выберите версию Windows, чтобы начать.'
                },
                {
                    question: `Что делать после создания носителя с помощью средства создания носителя?`,
                    answer: `
                        <p>Чтобы установить Windows, после создания установочного носителя выполните одно из следующих действий:</p>

                        <ul>
                            <li>
                                Подключите USB-устройство флэш-памяти к компьютеру, на который необходимо
                                установить Windows, найдите его в проводнике и откройте файл setup.exe.
                                Выполняйте инструкции, отображаемые в ходе установки.
                            </li>
                            <li>
                                Если ваш компьютер настроен на загрузку с USB-накопителя, подключите
                                USB-устройство флэш-памяти к компьютеру, на который необходимо установить
                                Windows, перезагрузите его, а затем следуйте инструкциям по установке.
                            </li>
                            <li>
                                Если компьютер настроен на загрузку с DVD-дисковода, вставьте DVD-диск в
                                компьютер, перезагрузите компьютер, а затем следуйте инструкциям по установке.
                            </li>
                        </ul>
                    `
                },
                {
                    question: 'Этот образ диска загрузочный?',
                    answer: 'Образ диска с этого сайта можно использовать для создания загрузочных USB-носителей DVD-дисков, которые предоставляют доступ к средствам восстановления.'
                }
            ];

            onClick = (e) => {
                var id = Number(e.target.dataset.id);
                this.setState({activeTabIdx: id});
            };

            render() {
                var {activeTabIdx} = this.state;
                var {items} = this;

                return (
                    <>
                        <p className="z">Кликая вопросам я хочу видеть ответы на них</p>

                        <dl className="faq">
                            {
                                items.map((item, idx) => {
                                    var className = activeTabIdx === idx ? 'active' : '';
                                    return (
                                        <>
                                            <dt className={`question ${className}`} data-id={idx} key={idx} onClick={this.onClick} >{item.question}</dt>
                                            <dd className="answer" dangerouslySetInnerHTML={{__html: item.answer}} />
                                        </>
                                    );
                                })
                            }
                        </dl>
                    </>
                );
            }
        }

        class TaskTabs extends React.Component {
            state = {
                activeTabIdx: 0,
            };

            tabs = [
                {
                    title: `Сегодня`,
                    content: `
                        <ul>
                            <li>Звёздные войны: Последние джедаи</li>
                            <li>Счастливый день смерти</li>
                            <li>Дыши</li>
                        </ul>
                    `
                },
                {
                    title: `Завтра`,
                    content: `
                        <ul>
                            <li>Киборги</li>
                            <li>Земля троллей</li>
                            <li>За пропастью во ржи</li>
                        </ul>
                    `
                },
                {
                    title: `23 декабря`,
                    content: `
                        <ul>
                            <li>Мой любимый динозавр</li>
                            <li>Фердинанд</li>
                            <li>Джуманджи: Зов джунглей</li>
                        </ul>
                    `
                }
            ];

            onClick = (e) => {
                var id = Number(e.target.dataset.id);
                this.setState({activeTabIdx: id});
            };

            render() {
                var {activeTabIdx} = this.state;
                var {tabs} = this;

                return (
                    <>
                        <p className="z">Кликая по вкладкам я хочу видеть связанное содержимое</p>

                        <h2>Сеансы</h2>
                        <div className="tabs">
                            {
                                tabs.map((tab, idx) => {
                                    var className = activeTabIdx === idx ? 'active' : '';
                                    return <div className={`item ${className}`} key={idx} data-id={idx} onClick={this.onClick}>{tab.title}</div>;
                                })
                            }
                        </div>
                        <div className="tabs-content">
                            {
                                tabs.map((tab, idx) => {
                                    var className = activeTabIdx === idx ? 'active' : '';
                                    return <div className={`item ${className}`} key={idx} data-id={idx} dangerouslySetInnerHTML={{__html: tab.content}} />;
                                })
                            }
                        </div>
                    </>
                );
            }
        }

        class TaskPopUp extends React.Component {
            state = {
                showPopUp: false
            };

            handleClick = () => {
                this.setState((state) => ({
                    showPopUp: !state.showPopUp
                }));
            };

            render() {
                var {showPopUp} = this.state;
                var className = showPopUp ? '' : 'hidden';

                return (
                    <>
                        <p className="z">Кликая на кнопку Login я хочу чтобы затенялся экран и по середине экрана появлялось окошко для авторизации закрыть которое можно кликнув по кнопке с крестиком</p>

                        <div className={`overlay ${className}`}></div>
                        <div className={`pop-up pop-up--login ${className}`}>
                            <button className="close" onClick={this.handleClick}>x</button>
                            <input type="text" placeholder="Username" />
                            <input type="password" placeholder="Password" />
                            <button className="login">Login</button>
                        </div>

                        <button className="show-login-pop-up" onClick={this.handleClick}>Login</button>
                    </>
                );
            }
        }

        class TaskLink extends React.Component {
            onClick = (e) => {
                e.preventDefault()
            };

            render() {
                return (
                    <>
                        <p className="z">Отменить действие по-умолчанию при клике на ссылку</p>

                        <p><a href="https://ebanoe.it/" className="link-ebanoe" target="_blank" onClick={this.onClick}>Ebanoe.IT — голая правда о нашем айти</a></p>
                    </>
                );
            }
        }

        class TaskAd extends React.Component {
            constructor(props) {
                super(props);

                this.state = {
                    showAd: true
                };
            }

            onClick = () => {
                localStorage.setItem('showAd', 'false');
                this.setState({showAd: false});
            };

            componentDidMount() {
                if (localStorage.getItem('showAd') === 'false') {
                    this.setState({showAd: false});
                }
            }

            render() {
                const style = {
                    display: this.state.showAd ? 'block' : 'none'
                };

                return (
                    <>
                        <p className="z">Надоела реклама про увеличение члена? При клике на кнопку "Больше не показывать" заноси в localStorage значение которое будешь проверять при загрузке страницы</p>
                        <p className="t t97" style={style} >Хочешь увеличить член? Заходи <a href="http://pornhub.com" target="_blank">сюда</a>! <button className="b97" onClick={this.onClick}>Больше не показывать</button></p>
                    </>
                );
            }
        }

        var App = function() {
            return (
                <>
                    <TaskChangeColor />
                    <TaskChangeBackgroundColor />
                    <TaskChangeHref />
                    <TaskChangeSrc />
                    <TaskChangeId />
                    <TaskChangeText />
                    <TaskChangeHtml />
                    <TaskChangeFontSize />
                    <TaskChangeAddClass />
                    <TaskChangeRemoveClass />
                    <TaskChangeToggleClass />
                    <TaskShowClass />
                    <TaskChangeBackgroundColorOnResize />
                    <TaskInputWithCounter />
                    <TaskWhores />
                    <TaskFish />
                    <TaskTooth />
                    <TaskSkier />
                    <TaskMikki />
                    <TaskMario />
                    <TaskSlider />
                    <TaskFaq />
                    <TaskTabs />
                    <TaskPopUp />
                    <TaskLink />
                    <TaskAd />
                </>
            );
        };

        ReactDOM.render(<App />, document.querySelector('#app'));
    </script>
</body>
</html>